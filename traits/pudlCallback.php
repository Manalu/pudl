<?php


////////////////////////////////////////////////////////////////////////////////
// SUPPORT FOR EVENT CALLBACK TRACKING AND TRIGGERING
////////////////////////////////////////////////////////////////////////////////
trait pudlCallback {




	////////////////////////////////////////////////////////////////////////////
	// REGISTER A CALLBACK FOR A PARTICULAR EVENT
	////////////////////////////////////////////////////////////////////////////
	public function on($event, callable $callback) {
		if (!is_string($event)) {
			throw new pudlException($this, 'Not a valid callback event');
		}

		$this->_callbacks[$event][] = $callback;
	}




	////////////////////////////////////////////////////////////////////////////
	// NOTIFY CALLBACKS OF A PARTICULAR EVENT
	////////////////////////////////////////////////////////////////////////////
	protected function trigger($event) {
		if (empty($this->_callbacks[$event])) return NULL;

		$args	= func_get_args();
		$return	= [];

		foreach ($this->_callbacks[$event] as $item) {
			$return[] = call_user_func_array($item, $args);
		}

		return $return;
	}




	////////////////////////////////////////////////////////////////////////////
	// PRIVATE VARIABLES - LIST OF REGISTERED CALLBACKS
	////////////////////////////////////////////////////////////////////////////
	private $_callbacks = [];

}
