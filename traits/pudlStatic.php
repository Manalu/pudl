<?php


////////////////////////////////////////////////////////////////////////////////
//STATIC API CALLS
////////////////////////////////////////////////////////////////////////////////
trait pudlStatic {




	////////////////////////////////////////////////////////////////////////////
	//UNKNOWN STATIC METHODS ARE CONVERTED INTO PUDLFUNCTION CALLS
	////////////////////////////////////////////////////////////////////////////
	public static function __callStatic($name, $arguments) {
		$value	= new pudlFunction();
		$name	= '_' . strtoupper($name);
		$value->$name = $arguments;
		return $value;
	}




	////////////////////////////////////////////////////////////////////////////
	//SAFELY PASS A COLUMN INTO A QUERY
	////////////////////////////////////////////////////////////////////////////
	public static function column($column, $value=false) {
		if (func_num_args() === 2) return new pudlColumn($column, $value);
		return new pudlColumn($column);
	}




	////////////////////////////////////////////////////////////////////////////
	//UNSAFE - PASS RAW SQL INTO A QUERY - USE CAUTION WITH THIS METHOD!
	////////////////////////////////////////////////////////////////////////////
	public static function raw(/* ...$values */) {
		return (new ReflectionClass('pudlRaw'))
				->newInstanceArgs(func_get_args());
	}




	////////////////////////////////////////////////////////////////////////////
	//FORCE DATATYPE INTO STRING WHEN INSERTING INTO SQL QUERY
	////////////////////////////////////////////////////////////////////////////
	public static function text(/* ...$values */) {
		return (new ReflectionClass('pudlText'))
				->newInstanceArgs(func_get_args());
	}




	////////////////////////////////////////////////////////////////////////////
	//CONVERT A TIMESTAMP INTO A DATETIME
	////////////////////////////////////////////////////////////////////////////
	public static function date($timestamp=false) {
		return ($timestamp === false)
			? self::now()
			: self::from_unixtime($timestamp);
	}




	////////////////////////////////////////////////////////////////////////////
	//FIND IN SET
	////////////////////////////////////////////////////////////////////////////
	public static function find($column, $values) {
		if (!is_array($values)) $values = explode(',', $values);
		$return = [];
		foreach ($values as $item) {
			$return[] = self::find_in_set($item, self::column($column));
		}
		return $return;
	}




	////////////////////////////////////////////////////////////////////////////
	//-NOT- FIND IN SET
	////////////////////////////////////////////////////////////////////////////
	public static function notFind($column, $values) {
		if (!is_array($values)) $values = explode(',', $values);
		$return = [];
		foreach ($values as $item) {
			$return[] = self::{'!find_in_set'}($item, self::column($column));
		}
		return $return;
	}




	////////////////////////////////////////////////////////////////////////////
	//CUSTOMIZED JSON ENCODER
	////////////////////////////////////////////////////////////////////////////
	public static function jsonEncode($data) {
		if ($data instanceof pudlObject) $data = $data->raw();
		return @json_encode($data, JSON_HEX_APOS|JSON_HEX_QUOT|JSON_PARTIAL_OUTPUT_ON_ERROR);
	}




	////////////////////////////////////////////////////////////////////////////
	//CUSTOMIZED JSON DECODER
	////////////////////////////////////////////////////////////////////////////
	public static function jsonDecode($data) {
		return @json_decode($data, true, 512, JSON_BIGINT_AS_STRING);
	}

}